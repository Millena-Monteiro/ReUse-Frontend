"use client";

import React, { createContext, useContext, ReactNode, useState, useEffect } from "react";
import axios from "axios";
import api from "@/lib/api";

// üë§ Interface para o tipo de usu√°rio que ser√° armazenado na sess√£o
interface UserSession {
  id: number | string;
  nome: string;
  email: string;
  tipo_user: string;
}

// üí° Interface para o contexto da sess√£o
interface SessionContextType {
  user: UserSession | null; // O usu√°rio logado, ou null se n√£o houver
  setUser: (user: UserSession | null) => void; // Fun√ß√£o para definir o usu√°rio
  loadingSession: boolean; // Para indicar se a sess√£o est√° sendo carregada/validada
}

// Cria o contexto com um valor padr√£o (null para user, false para loading)
const SessionContext = createContext<SessionContextType | undefined>(undefined);

interface SessionProviderProps {
  children: ReactNode;
}

// Componente Provedor para o contexto
export const SessionContextProvider: React.FC<SessionProviderProps> = ({
  children,
}) => {
  const [user, setUser] = useState<UserSession | null>(null);
  const [loadingSession, setLoadingSession] = useState(true); // Come√ßa como true para indicar que est√° verificando a sess√£o

  // üí° Efeito para tentar carregar a sess√£o do usu√°rio ao montar o provedor
  // Isso √© importante para manter o usu√°rio logado ap√≥s um recarregamento de p√°gina
  useEffect(() => {
    const loadSession = async () => {
      try {
        setLoadingSession(true);
        const response = await api.auth.get('/auth/session');
        if (response.status === 200 && response.data) {
          setUser(response.data);
        }
      } catch (err) {
        if (axios.isAxiosError(err) && err.response?.status === 401) {
          // Token inv√°lido ou expirado, limpar sess√£o
          setUser(null);
          console.log("Sess√£o expirada ou inv√°lida. Usu√°rio deslogado.");
        } else {
          console.error("Erro ao carregar sess√£o:", err);
        }
      } finally {
        setLoadingSession(false); // Finaliza o carregamento
      }
    };

    loadSession();
  }, []); // Executa apenas uma vez ao montar o componente

  const value = {
    user,
    setUser,
    loadingSession,
  };

  return (
    <SessionContext.Provider value={value}>{children}</SessionContext.Provider>
  );
};

// Hook customizado para usar o contexto
export const useSessionContext = () => {
  const context = useContext(SessionContext);
  if (context === undefined) {
    throw new Error(
      "useSessionContext must be used within a SessionContextProvider"
    );
  }
  return context;
};
